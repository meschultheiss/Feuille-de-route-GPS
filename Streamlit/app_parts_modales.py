from function_parts_modales import *
from style_parts_modales import *

st.set_page_config(
    page_title="Panel L√©manique",
    layout="wide",
    initial_sidebar_state="expanded",
)

if not check_password():
    st.stop()  # Do not continue if check_password is not True.

# Titre de l'application
st.write('## Panel L√©manique ¬∑ _Tracking GPS_')


# banner
st.write("_Derni√®re mise √† jour : 19 juin 2024_")
st.write("""Dans le cadre de l‚Äôenqu√™te du Panel L√©manique, un suivi gps a √©t√© r√©alis√© du 24 avril au 5 juin 2023 aupr√®s de 2806 personnes r√©sidentes de la zone d‚Äô√©tude. 
         Ces donn√©es ont √©t√© collect√©es par MotionTag, puis livr√©es (base brute) sous la forme de g√©odonn√©es de deux types : legs et staypoints. 
         Les g√©odonn√©es de type legs se rapprochent de l‚Äô√©tape1 de d√©placement, tel que renseign√© dans le mrmt. 
         Les staypoints se rapprochent des ‚Äúactivit√©s‚Äù ou transbordements.
         En suivant la feuille de route √©tablie en concertation avec les partenaires du projet _Panel L√©manique_, **nous pr√©sentons ci-dessous les r√©sultats du Module 1 : Parts modales**.
         """)

# Introduction
with st.container(border=1):
    col1, col2 = st.columns([5,1])
    # col1.write("Vous trouverez :")
    col1.write("""
        üå± Parts modales kilom√©triques pond√©r√©es par mode pour les r√©sident¬∑es 
               
        üå± Inclure les visiteurs non-r√©sident¬∑es 
               
        üå± Recodage des modes selon MRMT (et niveaux d'aggr√©gation suppl√©mentaires)
            
        üå± R√©√©chantillonnage des jours d‚Äôobservation et jours non-d√©plac√©s / non-detect√©s
             
        üå± Int√©grer les filtres de perte de signal
             
        üå± Sous-√©chantillonnage des r√©sidents et visiteurs par canton (bas√© sur le questionnaire)
             
        üå± Donn√©es d'√©quipement : v√©hicule principal des r√©pondant¬∑es 
            
        üå± Statistiques GPS des r√©pondant¬∑es
    """)

# Charger les donn√©es
legs_nogeometry = load_data_legs()
usr_stats = load_data_usrstat()

# Sidebar
# Logo
st.sidebar.markdown(style_logo, unsafe_allow_html=True)
st.sidebar.markdown("![](https://assets.super.so/15749c3c-d748-4e49-bff7-6fc9ec745dc4/images/adbffa1b-9e3c-49f8-9b4e-605d29073f81/IMAGEFichier_102.svg)", unsafe_allow_html=True)
# Title
st.sidebar.title('Module 1 ¬∑ _parts modales_')

# User Interface for user inputs
mode_col = st.sidebar.selectbox("**S√©lectionner la colonne des modes de transport (d√©tect√© ou confirm√©)**", ['detected_mode', 'mode'], index=1)
KT = st.sidebar.selectbox('**S√©lectionner le canton pour √©chantillonnage**', ['GE', 'VD', 'Tous'])
weight = st.sidebar.selectbox('**S√©lectionner la pond√©ration**', ['wgt_cant_trim_gps', 'Aucun'])
period_of_tracking = st.sidebar.selectbox("**S√©lectionner la p√©riode d'observation √† consid√©rer**", ['active_days_count', 'days_with_track','days_in_range'], index=2)
mode_aggreg = st.sidebar.selectbox("**S√©lectionner le niveau d'aggr√©gation des modes**", ["Motiontag", "MRMT", "Niveau 1", "Niveau 2"])

bad_users = st.sidebar.checkbox('Inclure les utilisateurs avec mauvais signal r√©current', value=False)
visitors = st.sidebar.checkbox('Inclure les visiteurs', value=False)
airplane = st.sidebar.checkbox('Inclure les √©tapes en avion', value=False)
incl_signal_loss = st.sidebar.selectbox('Exclure les √©tapes avec une perte de signal importante (non-recommand√©)', ['Non', "0.05 de perte", "0.07 de perte"], index=0)
outliers = st.sidebar.selectbox('**Exclure les distances extr√™mes**', ['Quantile95', 'Quantile98', 'Quantile99', 'Aucune'], index=2)



# Footer
st.markdown(footer, unsafe_allow_html=True)

st.write('#### Aper√ßu des donn√©es')
# Aper√ßu de la base legs_nogeometries
st.markdown("""Le **fichier √©tape** (ou _legs_) avec les variables n√©cessaires au calcul des distances par mode et par r√©pondant¬∑es.
   Plusieurs variables ont √©t√© ajout√©es au fichier de base.
""")
                    
with st.container():
    col1, col2 = st.columns([5, 2])
    
    with col1:
        with st.expander("**Fichier √©tapes** : description des variables"):
            st.markdown("""
                - **leg_id** : Identifiant de l'√©tape (segment de trajet).
                - **user_id_day** : Identifiant personne-jour.
                - **user_id_fors** : Identifiant de l'utilisateur dans le syst√®me FORS.
                - **type** : Type de l'√©tape (segment de trajet).
                - **geometry** : G√©om√©trie de l'√©tape (segment de trajet).
                - **legs_date** : Date des √©tapes (segments de trajet).
                - **started_at** : Heure de d√©but de l'√©tape (segment de trajet).
                - **started_at_timezone** : Fuseau horaire de d√©but de l'√©tape.
                - **finished_at** : Heure de fin de l'√©tape (segment de trajet).
                - **finished_at_timezone** : Fuseau horaire de fin de l'√©tape.
                - **length_leg** : Longueur de l'√©tape (segment de trajet).
                - **detected_mode** : Mode de d√©placement d√©tect√©.
                - **mode** : Mode de d√©placement.
                - **purpose** : But de l'√©tape (segment de trajet).
                - **confirmed_at** : Heure de confirmation de l'√©tape.
                - **started_on** : Date de d√©but de l'√©tape.
                - **misdetected_completely** : D√©tection compl√®tement erron√©e.
                - **merged** : Fusionn√© avec d'autres √©tapes.
                - **created_at** : Date de cr√©ation de l'√©tape.
                - **updated_at** : Date de mise √† jour de l'√©tape.
                - **started_at_in_timezone** : Heure de d√©but dans le fuseau horaire sp√©cifi√©.
                - **finished_at_in_timezone** : Heure de fin dans le fuseau horaire sp√©cifi√©.
                - **confirmed_at_in_timezone** : Heure de confirmation dans le fuseau horaire sp√©cifi√©.
                - **created_at_in_timezone** : Date de cr√©ation dans le fuseau horaire sp√©cifi√©.
                - **updated_at_in_timezone** : Date de mise √† jour dans le fuseau horaire sp√©cifi√©.
                - **point_per_linestring** : Points par ligne de la g√©om√©trie.
                - **max_signlalloss_meters** : Perte maximale de signal en m√®tres.
                - **length_leg** : Longueur de l'√©tape (segment de trajet).
                - **rel_max_signalloss** : Perte de signal relative maximale.
                - **low_quality_legs_1** : Filtre spatial (perte √† 5%) - Qualit√© faible.
                - **low_quality_legs_2** : Filtre spatial (perte √† 7%) - Qualit√© faible.
                - **usr_w_constant_bad_signal** : Utilisateur avec un signal GPS constamment mauvais.
                - **leading_stay_id** : Identifiant de l'activit√© √† destination.
                - **duration** : Dur√©e de l'√©tape (segment de trajet).
                - **activity_in_KT** : Canton de l'activit√© √† destination.
                - **panel_area** : _True_ si l'activit√© √† destination se passe dans le p√©rim√®tre du panel.
                - **KT_home_survey** : Canton de r√©sidence de la personne.
            """)

        st.dataframe(legs_nogeometry.head(4))
    
    # with col2:
    #     col2.download_button(
    #         label="T√©l√©charger les √©tapes",
    #         data=legs_nogeometry.to_csv(),
    #         file_name='legs_nogeometry.zip'
    #     )

# Aper√ßu de la base user_stats
st.markdown("""
    Le **fichier _user statistics_** a √©t√© g√©n√©r√© pour pouvoir calculer les distances moyennes. 
    Il recense plusieurs informations importantes sur le suivi GPS des r√©pondant¬∑es.
 """)
with st.container():
    col1, col2 = st.columns([5, 2])

    with col1:
        with st.expander("**Fichier user statistics** : description des variables"):
            st.markdown("""
                - **user_id_fors** : Identifiant de l'utilisateur dans le syst√®me FORS.
                - **KT_home_survey** : Canton de r√©sidence de l'utilisateur selon l'enqu√™te.
                - **KT_home_gps** : Canton de r√©sidence de l'utilisateur bas√© sur les donn√©es GPS.
                - **first_activity_date** : Date de la premi√®re activit√© enregistr√©e.
                - **last_activity_date** : Date de la derni√®re activit√© enregistr√©e.
                - **days_in_range** : Nombre total de jours dans la plage temporelle √©tudi√©e.
                - **active_days_count** : Nombre de jours o√π l'utilisateur a eu au moins une activit√© / √©tape enregistr√©e.
                - **days_without_event** : Nombre de jours sans aucune d√©tection enregistr√©e.
                - **days_with_track** : Nombre de jours avec au moins une √©tape disponible.
                - **days_without_track** : Nombre de jours sans aucune √©tape d√©tect√©e.
                - **ID_municipality_survey** : Identifiant de la municipalit√© selon l'enqu√™te.
                - **ID_Agglo_survey** : Identifiant de l'agglom√©ration selon l'enqu√™te.
                - **N_Agglo_survey** : Nombre d'agglom√©rations identifi√©es dans l'enqu√™te.
                - **gdr** : Genre de l'utilisateur (sexe).
                - **prof** : Profession de l'utilisateur.
                - **age_fr** : √Çge de l'utilisateur en ann√©es.
                - **wgt_cant_gps** : Poids appliqu√© aux donn√©es GPS du canton.
                - **wgt_agg_gps** : Poids appliqu√© aux donn√©es GPS de l'agglom√©ration.
                - **wgt_cant_trim_gps** : Poids appliqu√© aux donn√©es GPS du canton apr√®s ajustement.
                - **wgt_agg_trim_gps** : Poids appliqu√© aux donn√©es GPS de l'agglom√©ration apr√®s ajustement.
                - **main_motor** : Principal moyen de transport de l'utilisateur.
                - **car_in_HH_count** : Nombre de voitures dans le m√©nage de l'utilisateur.
                - **home_geometry_from_gps** : G√©om√©trie de la r√©sidence de l'utilisateur bas√©e sur les donn√©es GPS (EPSG:4326).
                - **home_geometry_from_survey** : G√©om√©trie de la r√©sidence de l'utilisateur bas√©e sur l'enqu√™te (EPSG:4326).
                - **distance_home_gps_survey_m** : Distance entre la r√©sidence de l'utilisateur selon les donn√©es GPS et l'enqu√™te (en m√®tres).
            """)   
        st.dataframe(usr_stats.sample(4))

#     with col2:
#         st.download_button(
#             label="T√©l√©charger les statistiques utilisateur¬∑ices",
#             data=usr_stats.to_csv(),
#             file_name='usr_stats.csv',
#             mime='text/csv',
#         )

st.markdown("""
    ### Les points cl√©s sont les suivants :
    - Un r√©√©chantillonnage temporel a permis de s'assurer de la continuit√© temporelle de la base et de compter les jours non-actifs entre le d√©but et la fin du suivi et les jours sans d√©placement. Il appara√Æt que 966 / 675 / 295 r√©pondant¬∑es ont au moins 3 / 5 / 10 jours non-d√©tect√©s.
    - La d√©termination du Canton de domicile n'est pas √©vidente. La question 14 du questionnaire vague 1 permet d'obtenir une adresse d√©clar√©e, mais une centaine de r√©pondant¬∑es (parmi la base GPS) n'ont pas renseign√© ce champ. L'alternative est de d√©terminer les lieux de domicile sur la base du GPS. Avec cette approche, 266 personnes (env. 10%) n'ont pas le m√™me canton de r√©sidence entre le d√©claratif (questionnaire) et l'observ√© (GPS).
    - Nous pouvons d√©terminer les distances parcourues moyennes journali√®res par r√©pondant¬∑es en tenant compte des visiteurs, des √©tapes en avion, des jours actifs sans d√©placement et des pertes de signal.
""")


st.write('#### Distances moyennes journali√®res par r√©pondant¬∑es')
st.write("üëà Aide: r√©glez les param√®tres √† gauche et lancez les calculs !")



# Bouton pour calculer les parts modales

if st.sidebar.button('Calculer les parts modales'):
    # Barre de progr√®s
    progress_text = "Calculs en cours"
    my_bar = st.progress(0, text=progress_text)

    for percent_complete in range(100):
        time.sleep(0.01)
        my_bar.progress(percent_complete + 1, text=progress_text)
    time.sleep(1)
    # Calculer les parts modales
    # Applying conditions and filtering data to get daily modal distances
    dmd_w = calculate_dmd(legs_nogeometry, usr_stats, KT, weight, period_of_tracking, bad_users, visitors, airplane, incl_signal_loss, outliers, mode_col)
    dmd_w = dmd_aggreg_modes(dmd_w, level=mode_aggreg)

    # Calcul des parts modales
    mean_modal_share = dmd_w.mean()
    modal_share = pd.DataFrame(dmd_w.sum()).astype(int).rename(columns={0:"Distances journali√®res cumul√©es [m√®tres]"})

    # Description m√©thodo
    st.write("**M√©thode** : Somme des distances de toutes les √©tapes (par mode et usager) divis√© par la p√©riode d'observation s√©lectionn√©e. La pond√©ration pour redressement est appliqu√©e selon les param√®tres s√©lectionn√©s.") 

    # Afficher les parts modales
    with st.container():
        col1, col2 = st.columns([5, 2])
        with col1:
            st.write(dmd_w)
        with col2:
            st.download_button(
                label="T√©l√©charger les distances moyennes journali√®res",
                data=dmd_w.to_csv(),
                file_name='distances_jour_user_pond.csv',
                mime='text/csv',
            )
            st.write(f"Nombre d'utilisateur conserv√©s dans le calcul : {len(dmd_w)}")
    st.write('### Parts modales kilom√©triques (base √©tape)')
     # Description m√©thodo
    st.write("**M√©thode** : Distances moyennes journali√®res cumul√©es (somme des colonnes du tableau ci-dessus).") 

    st.write(modal_share.T)
    
    with st.container():
        col1, col2 = st.columns([2, 5])
        col1.write("**Parts modales kilom√©triques** (somme des moyennes pond√©r√©es et journali√®res des distances parcourues par mode)")

        fig = px.pie(modal_share.reset_index(), values="Distances journali√®res cumul√©es [m√®tres]", names='index', hole=.3, color_discrete_sequence=px.colors.sequential.Blugrn)
        col2.plotly_chart(fig, theme="streamlit")

    # Analyze the signal loss
        # Plot des graphiques
    if incl_signal_loss == 'Non':
        legs_nogeometry_lql = legs_nogeometry[legs_nogeometry.low_quality_legs_1 == 1].copy().reset_index(drop=True)

        dmd_w_lql = calculate_dmd(legs_nogeometry_lql, usr_stats, KT, weight, period_of_tracking, bad_users, visitors, airplane, incl_signal_loss, outliers, mode_col)
        dmd_w_lql = dmd_aggreg_modes(dmd_w_lql, level=mode_aggreg)
        
        with st.container():
            col1, col2 = st.columns([2, 5])
            with col1:
                st.write("""
                       **Distribution des pertes de signal** 
                       (Pourcentage des distances potentiellement affect√© par mode)
                       """)

            with col2:
                st.bar_chart((dmd_w_lql / dmd_w).fillna(0).mean(), color=["#dfab9a"])  # Optional

    my_bar.empty()

st.sidebar.write("#")
st.sidebar.divider()
# Adding the footnote using Markdown with CSS
st.sidebar.markdown("""
<span style="font-size: small;">
                    *wgt_cant_trim_gps : redressement au canton <br>
                    *wgt_agg_trim_gps : redressement √† l'agglom√©ration <br>
                    **Les jours actifs sont les jours avec au moins une activit√© ou √©tape detect√©e. *Days in range* int√®gre les jours non-detect√©s (non recommand√©).
                    </span>
""", unsafe_allow_html=True)